// Generated using SwiftGen, by O.Halligon â€” https://github.com/SwiftGen/SwiftGen

#if os(iOS) || os(tvOS) || os(watchOS)
  import UIKit.UIColor
  typealias Color = UIColor
#elseif os(OSX)
  import AppKit.NSColor
  typealias Color = NSColor
#endif

// swiftlint:disable operator_usage_whitespace
extension Color {
  convenience init(rgbaValue: UInt32) {
    let red   = CGFloat((rgbaValue >> 24) & 0xff) / 255.0
    let green = CGFloat((rgbaValue >> 16) & 0xff) / 255.0
    let blue  = CGFloat((rgbaValue >>  8) & 0xff) / 255.0
    let alpha = CGFloat((rgbaValue      ) & 0xff) / 255.0

    self.init(red: red, green: green, blue: blue, alpha: alpha)
  }
}
// swiftlint:enable operator_usage_whitespace

{% if colors %}
// swiftlint:disable file_length
// swiftlint:disable line_length

// swiftlint:disable type_body_length
{% set enumName %}{{param.enumName|default:"ColorName"|swiftIdentifier}}{% endset %}
enum {{enumName}}: UInt32 {
  {% for color in colors %}
  /// <span style="display:block;width:3em;height:2em;border:1px solid black;background:#{{color.red}}{{color.green}}{{color.blue}}"></span>
  /// Alpha: {{color.alpha|hexToInt|int255toFloat|percent}} <br/> (0x{{color.red}}{{color.green}}{{color.blue}}{{color.alpha}})
  case {{color.name|swiftIdentifier|escapeReservedKeywords}} = 0x{{color.red}}{{color.green}}{{color.blue}}{{color.alpha}}
  {% endfor %}

  var color: Color {
    return Color(named: self)
  }
}
// swiftlint:enable type_body_length

extension Color {
  convenience init(named name: {{enumName}}) {
    self.init(rgbaValue: name.rawValue)
  }
}
// swiftlint:enable file_length
// swiftlint:enable line_length
{% else %}
// No color found
{% endif %}
