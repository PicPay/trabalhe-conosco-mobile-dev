// Generated using SwiftGen, by O.Halligon â€” https://github.com/SwiftGen/SwiftGen

{% if tables.first.levels %}
import Foundation

// swiftlint:disable file_length
// swiftlint:disable line_length

// swiftlint:disable type_body_length
// swiftlint:disable nesting

{% set enumName %}{{param.enumName|default:"L10n"}}{% endset %}
enum {{enumName}} {
{% macro enumBlock item sp %}
{{sp}}  {% for string in item.strings %}
{{sp}}  /// {{string.translation}}
{{sp}}  case {{string.name|swiftIdentifier|snakeToCamelCase|escapeReservedKeywords}}{% if string.types %}({{string.types|join}}){% endif %}
{{sp}}  {% endfor %}
{{sp}}  {% for child in item.children %}

{{sp}}  case {{child.name|swiftIdentifier|snakeToCamelCase|escapeReservedKeywords}}({{child.name|swiftIdentifier|snakeToCamelCase}}{{enumName}})
{{sp}}  enum {{child.name|swiftIdentifier|snakeToCamelCase}}{{enumName}} {
{{sp}}    {% set sp2 %}{{sp}}  {% endset %}
{{sp}}    {% call enumBlock child sp2 %}
{{sp}}  }
{{sp}}  {% endfor %}
{% endmacro %}
  {% call enumBlock tables.first.levels sp %}
}

extension {{enumName}}: CustomStringConvertible {
{% macro parametersBlock types %}{% for type in types %}let p{{forloop.counter}}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}
{% macro argumentsBlock types %}{% for type in types %}p{{forloop.counter}}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}
{% macro extensionBlock item sp keySuffix %}
{{sp}}  {% for string in item.strings %}
{{sp}}  {% if string.types %}
{{sp}}  case .{{string.name|swiftIdentifier|snakeToCamelCase|escapeReservedKeywords}}({% call parametersBlock string.types %}):
{{sp}}    return {{enumName}}.tr("{{string.key}}", {% call argumentsBlock string.types %})
{{sp}}  {% else %}
{{sp}}  case .{{string.name|swiftIdentifier|snakeToCamelCase|escapeReservedKeywords}}:
{{sp}}    return {{enumName}}.tr("{{string.key}}")
{{sp}}  {% endif %}
{{sp}}  {% endfor %}
{{sp}}  {% for child in item.children %}
{{sp}}  {% set subkey %}levelSub{{keySuffix}}Key{{child.name|swiftIdentifier|snakeToCamelCase|escapeReservedKeywords}}{% endset %}
{{sp}}  case .{{child.name|swiftIdentifier|snakeToCamelCase|escapeReservedKeywords}}(let {{subkey}}):

{{sp}}    switch {{subkey}} {
{{sp}}    {% set sp2 %}{{sp}}    {% endset %}
{{sp}}    {% set keySuffix %}{{keySuffix}}Sub{% endset %}
{{sp}}    {% call extensionBlock child sp2 keySuffix %}
{{sp}}    }
{{sp}}  {% endfor %}
{% endmacro %}
  var description: String { return self.string }

  var string: String {
    switch self {
      {% call extensionBlock tables.first.levels "    " keySuffix %}
    }
  }

  private static func tr(key: String, _ args: CVarArgType...) -> String {
    let format = NSLocalizedString(key, bundle: NSBundle(forClass: BundleToken.self), comment: "")
    return String(format: format, locale: NSLocale.currentLocale(), arguments: args)
  }
}

// swiftlint:enable type_body_length
// swiftlint:enable nesting

func tr(key: {{enumName}}) -> String {
  return key.string
}

private final class BundleToken {}
{% else %}
// No string found
{% endif %}
