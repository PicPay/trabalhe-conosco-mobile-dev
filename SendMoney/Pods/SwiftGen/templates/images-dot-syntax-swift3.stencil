// Generated using SwiftGen, by O.Halligon â€” https://github.com/SwiftGen/SwiftGen

{% if catalogs %}
#if os(iOS) || os(tvOS) || os(watchOS)
  import UIKit.UIImage
  typealias Image = UIImage
#elseif os(OSX)
  import AppKit.NSImage
  typealias Image = NSImage
#endif

// swiftlint:disable file_length
// swiftlint:disable line_length
// swiftlint:disable nesting

{% set enumName %}{{param.enumName|default:"Asset"}}{% endset %}
struct {{enumName}}Type: ExpressibleByStringLiteral {
  fileprivate var value: String

  var image: Image {
    let bundle = Bundle(for: BundleToken.self)
    #if os(iOS) || os(tvOS)
    let image = Image(named: value, in: bundle, compatibleWith: nil)
    #elseif os(OSX)
    let image = bundle.image(forResource: value)
    #elseif os(watchOS)
    let image = Image(named: value)
    #endif
    guard let result = image else { fatalError("Unable to load image \(value).") }
    return result
  }

  init(stringLiteral value: String) {
    self.value = value
  }

  init(extendedGraphemeClusterLiteral value: String) {
    self.init(stringLiteral: value)
  }

  init(unicodeScalarLiteral value: String) {
    self.init(stringLiteral: value)
  }
}
{% macro recursiveBlock images sp %}
{{sp}}  {% for image in images %}
{{sp}}  {% if not image.items %}
{{sp}}  static let {{image.name|swiftIdentifier|snakeToCamelCase|lowerFirstWord|escapeReservedKeywords}}: {{enumName}}Type = "{{image.value}}"
{{sp}}  {% else %}
{{sp}}  enum {{image.name|swiftIdentifier|snakeToCamelCase|escapeReservedKeywords}} {
{{sp}}    {% set sp2 %}{{sp}}  {% endset %}
{{sp}}    {% call recursiveBlock image.items sp2 %}
{{sp}}  }
{{sp}}  {% endif %}
{{sp}}  {% endfor %}
{% endmacro %}

// swiftlint:disable type_body_length
enum {{enumName}} {
  {% if catalogs.count > 1 %}
  {% for catalog in catalogs %}
  enum {{catalog.name|swiftIdentifier|snakeToCamelCase|escapeReservedKeywords}} {
    {% call recursiveBlock catalog.assets "  " %}
  }
  {% endfor %}
  {% else %}
  {% call recursiveBlock catalogs.first.assets "" %}
  {% endif %}
}
// swiftlint:enable type_body_length

extension Image {
  convenience init!(asset: {{enumName}}Type) {
    #if os(iOS) || os(tvOS)
    let bundle = Bundle(for: BundleToken.self)
    self.init(named: asset.value, in: bundle, compatibleWith: nil)
    #elseif os(OSX) || os(watchOS)
    self.init(named: asset.value)
    #endif
  }
}

private final class BundleToken {}
{% else %}
// No image found
{% endif %}
