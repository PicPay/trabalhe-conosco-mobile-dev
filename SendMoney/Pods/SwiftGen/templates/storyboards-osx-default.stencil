// Generated using SwiftGen, by O.Halligon â€” https://github.com/SwiftGen/SwiftGen

{% macro className scene %}{% if scene.customClass %}{% if scene.customModule %}{{scene.customModule}}.{% endif %}{{scene.customClass}}{% else %}NS{{scene.baseType}}{% endif %}{% endmacro %}
import Foundation
import Cocoa
{% for module in modules where module != env.PRODUCT_MODULE_NAME and module != param.module %}
import {{module}}
{% endfor %}

{% if storyboards %}
// swiftlint:disable file_length
// swiftlint:disable line_length
// swiftlint:disable type_body_length

{# This first part of the code is static, same every time whatever Storyboard you have #}
protocol StoryboardSceneType {
  static var storyboardName: String { get }
}

extension StoryboardSceneType {
  static func storyboard() -> NSStoryboard {
    return NSStoryboard(name: self.storyboardName, bundle: NSBundle(forClass: BundleToken.self))
  }

  static func initialController() -> AnyObject {
    guard let controller = storyboard().instantiateInitialController()
    else {
      fatalError("Failed to instantiate initialViewController for \(self.storyboardName)")
    }
    return controller
  }
}

extension StoryboardSceneType where Self: RawRepresentable, Self.RawValue == String {
  func controller() -> AnyObject {
    return Self.storyboard().instantiateControllerWithIdentifier(self.rawValue)
  }
  static func controller(identifier: Self) -> AnyObject {
    return identifier.controller()
  }
}

protocol StoryboardSegueType: RawRepresentable { }

extension NSWindowController {
  func performSegue<S: StoryboardSegueType where S.RawValue == String>(segue: S, sender: AnyObject? = nil) {
    performSegueWithIdentifier(segue.rawValue, sender: sender)
  }
}

extension NSViewController {
  func performSegue<S: StoryboardSegueType where S.RawValue == String>(segue: S, sender: AnyObject? = nil) {
    performSegueWithIdentifier(segue.rawValue, sender: sender)
  }
}

{# This is where the generation begins, this code depends on what you have in your Storyboards #}
{% set sceneEnumName %}{{param.sceneEnumName|default:"StoryboardScene"}}{% endset %}
enum {{sceneEnumName}} {
  {% for storyboard in storyboards %}
  {% set storyboardName %}{{storyboard.name|swiftIdentifier|escapeReservedKeywords}}{% endset %}
  {% if storyboard.scenes %}
  enum {{storyboardName}}: String, StoryboardSceneType {
    static let storyboardName = "{{storyboard.name}}"
    {% for scene in storyboard.scenes %}
    {% set sceneID %}{{scene.identifier|swiftIdentifier}}{% endset %}

    case {{sceneID}}Scene = "{{scene.identifier}}"
    {% set sceneClass %}{% call className scene %}{% endset %}
    static func instantiate{{sceneID|snakeToCamelCase}}() -> {{sceneClass}} {
      guard let vc = {{sceneEnumName}}.{{storyboardName}}.{{sceneID}}Scene.controller() as? {{sceneClass}}
      else {
        fatalError("ViewController '{{scene.identifier}}' is not of the expected class {{sceneClass}}.")
      }
      return vc
    }
    {% endfor %}
  }
  {% else %}
  enum {{storyboardName}}: StoryboardSceneType {
    static let storyboardName = "{{storyboard.name}}"
  }
  {% endif %}
  {% endfor %}
}

enum {{param.segueEnumName|default:"StoryboardSegue"}} {
  {% for storyboard in storyboards where storyboard.segues %}
  enum {{storyboard.name|swiftIdentifier|escapeReservedKeywords}}: String, StoryboardSegueType {
    {% for segue in storyboard.segues %}
    {% set segueID %}{{segue.identifier|swiftIdentifier}}{% endset %}
    case {{segueID|escapeReservedKeywords}}{% if segueID != segue.identifier %} = "{{segue.identifier}}"{% endif %}
    {% endfor %}
  }
  {% endfor %}
}

private final class BundleToken {}
{% else %}
// No storyboard found
{% endif %}
